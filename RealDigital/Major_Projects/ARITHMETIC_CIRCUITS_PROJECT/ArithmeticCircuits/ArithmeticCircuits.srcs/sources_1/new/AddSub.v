/* GOAL: Create a CLA based adder/subtractor module that allows a user to add or subtract two 8-bit numbers
 *
 * sysClk is the clock generated by the RealDigital Blackboard
 * sw is used to control each of the 8 bits to be pushed into reg0 or reg1
 * btn is used to clock values into reg0 and reg1 respectively
 * subCtrl is used to activate subtraction instead of addition
 * Cout is the carry-out generated by the 8th FA module
 * 
 * ssegctrl controls which of four ssegs to activate at a certain time, and sseg represents each
 *      light inside the seven segment display that is currently active
 *
 * Created by: MorphoCH22
 * Board used: RealDigital Blackboard (Xilinx XC7007S ZYNQ)
 */

module AddSub(
        input [7:0] sw,
        input sysClk,
        input [1:0] btn,
        input subCtrl,
        output Cout,
        output [3:0] ssegctrl,
        output [6:0] sseg
    );
    
    wire slowClk;
    wire [1:0] regCtrl;
    
    wire [7:0] regOut0, regOut1, regOut2;
    
    wire [7:0] sum; 
    wire [11:0] sumBCD;
    
    ClockDivider clock_div (
                            .clkIn(sysClk),
                            .clkOut(slowClk)
                           );
    
    PushButtonDebouncer btn0 (
                            .push(btn[0]),
                            .clk(sysClk),
                            .slowClk(slowClk),
                            .out(regCtrl[0])
                             );
                             
    PushButtonDebouncer btn1 (
                            .push(btn[1]),
                            .clk(sysClk),
                            .slowClk(slowClk),
                            .out(regCtrl[1])
                             );
                             
    Register reg0 (
                  .D(sw),
                  .sysClk(sysClk),
                  .clk(regCtrl[0]),
                  .Q(regOut0)
                  );
                  
    Register reg1 (
                  .D(sw),
                  .sysClk(sysClk),
                  .clk(regCtrl[1]),
                  .Q(regOut1)
                  );
                  
    Inverter inv (
                 .Inv(subCtrl),
                 .D(regOut1),
                 .Q(regOut2)
                 );
                 
    CLA adderSub (
                 .Cin(subCtrl),
                 .A(regOut0),
                 .B(regOut2),
                 .sum(sum),
                 .Cout(Cout)
                 );
                 
    bin2bcd converter (
                      .bin(sum),
                      .bcd(sumBCD)
                      );
               
    SevenSeg sevseg (
                    .signCtrl(sum[7]),
                    .dataIn(sumBCD),
                    .clk(sysClk),
                    .ssegctrl(ssegctrl),
                    .sseg(sseg)
                    );
    
endmodule
