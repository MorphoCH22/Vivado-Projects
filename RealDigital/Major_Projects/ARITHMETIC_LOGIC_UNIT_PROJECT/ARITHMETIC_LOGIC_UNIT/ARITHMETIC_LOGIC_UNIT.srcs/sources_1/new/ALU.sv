`timescale 1ns / 1ps
/* GOAL: Create a bit-slice 8-bit ALU design with an instruction set of 16, 
 * including addition/subtraction, bitwise operations, and shifting operations.
 *
 * clk and En allows the user to verify the opcode and values of A and B to be processed.
 *
 * A and B are bytes that are fed into the ALU from registers.
 * Cin is initially chosen based off the opcode (for subtraction control as an example),
 *      and Cout determines overflow.
 * F is the final output generated by A and B based on the opcode provided.
 *
 * Created by: MorphoCH22
 * Board used: RealDigital Blackboard (Xilinx XC7007S ZYNQ)
 */

module ALU(
        input clk, En,
        input Cin,
        input [3:0] opcode,
        input [7:0] A, B,
        output reg [7:0] F,
        output reg Cout
    );
    
    wire [7:0] C;
    
    reg [3:0] opcodeIn;
    reg [7:0] Ain, Bin;
    wire [7:0] Fout;
    
    
    ALUslice slice0     (
                        .opcode(opcodeIn),
                        .A(Ain[0]),
                        .B(Bin[0]),
                        .Cin(Cin),
                        .F(Fout[0]),
                        .Cout(C[0])
                        );
                        
    ALUslice slice1     (
                        .opcode(opcodeIn),
                        .A(Ain[1]),
                        .B(Bin[1]),
                        .Cin(C[0]),
                        .F(Fout[1]),
                        .Cout(C[1])
                        );
                        
    ALUslice slice2     (
                        .opcode(opcodeIn),
                        .A(Ain[2]),
                        .B(Bin[2]),
                        .Cin(C[1]),
                        .F(Fout[2]),
                        .Cout(C[2])
                        );
                        
    ALUslice slice3     (
                        .opcode(opcodeIn),
                        .A(Ain[3]),
                        .B(Bin[3]),
                        .Cin(C[2]),
                        .F(Fout[3]),
                        .Cout(C[3])
                        );
                        
    ALUslice slice4     (
                        .opcode(opcodeIn),
                        .A(Ain[4]),
                        .B(Bin[4]),
                        .Cin(C[3]),
                        .F(Fout[4]),
                        .Cout(C[4])
                        );
    
    ALUslice slice5     (
                        .opcode(opcodeIn),
                        .A(Ain[5]),
                        .B(Bin[5]),
                        .Cin(C[4]),
                        .F(Fout[5]),
                        .Cout(C[5])
                        );
                        
    ALUslice slice6     (
                        .opcode(opcodeIn),
                        .A(Ain[6]),
                        .B(Bin[6]),
                        .Cin(C[5]),
                        .F(Fout[6]),
                        .Cout(C[6])
                        );
                        
    ALUslice slice7     (
                        .opcode(opcodeIn),
                        .A(Ain[7]),
                        .B(Bin[7]),
                        .Cin(C[6]),
                        .F(Fout[7]),
                        .Cout(C[7])
                        );
                      
    always @(posedge(clk)) begin
    if (En) begin
        if (opcode > 11) begin
            case (opcode)
            4'b1100:        begin // MULTIPLY A AND B
                                F <= A * B; Cout <= 0;
                                end
            4'b1101:        begin // MULTIPLY A AND B
                                F <= A * 8'd2; Cout <= 0;
                                end
            4'b1110:        begin // ROTATE A LEFT BY 1
                                F <= {A[6:0], A[7] }; Cout <= 0;
                                end             
            4'b1111:        begin // ROTATE A RIGHT BY 1
                                F <= {A[0], A[7:1]}; Cout <= 0;
                                end             
            endcase
        end else begin
            opcodeIn <= opcode;
            Ain <= A;
            Bin <= B;
            #100
            F <= Fout;
            Cout <= C[7];
        end
    end
    end                                 
endmodule
